package club.koupah.logchecker.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.GZIPInputStream;

import club.koupah.logchecker.ExploitChecker;

public class Utils {

	static File tempFolder;
	static {
		tempFolder = new File("ExploitChecker-Temp");
		tempFolder.mkdir();
		tempFolder.deleteOnExit();
	}

	public static boolean isWindows() {
		final String os = System.getProperty("os.name");
		return os.equalsIgnoreCase("Windows 10") || !os.startsWith("Windows");
	}

	public static boolean getBooleanInput() {
		String input = getInput("y", "yes", "n", "no", "true", "false");
		return input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yes") || input.equalsIgnoreCase("true");
	}

	public static File getDirectoryInput() {
		String input;

		while ((input = getInput()) != null) {
			File in;
			try {
				in = new File(input);

				if (!in.isDirectory()) {
					logSameLine("Error: That is a File, not a Directory");
				} else {
					return in;
				}
			} catch (Exception e) {
				logSameLine("Error: Invalid File! (" + e.getMessage() + ")");
			}
		}

		return null;
	}

	public static boolean containsFolder(File dir, String folderName) {
		for (File file : dir.listFiles())
			if (file.isDirectory() && file.getName().equalsIgnoreCase(folderName))
				return true;

		return false;
	}

	public static void waitForEnter() {
		ExploitChecker.getInput().nextLine();
	}

	public static String getInput(String... validInput) {
		String input;
		final String valid = String.join(", ", validInput);

		while ((input = getInput()) != null) {
			if (!contains(input, validInput)) {
				logSameLine("Invalid Input! (Accepted: " + valid + ")");
			} else {
				break;
			}
		}

		return input;
	}

	public static String getInput() {
		logSameLine(" > ");
		return ExploitChecker.getInput().nextLine();
	}

	private static boolean contains(String checking, String[] array) {
		if (array.length == 0)
			return true;

		for (String string : array)
			if (checking.equalsIgnoreCase(string))
				return true;

		return false;
	}

	public static String logSameLine(Object out) {
		System.out.print(out);
		return out.toString();
	}

	public static List<File> checkAllFiles(File directory) {
		List<File> containing = new ArrayList<File>();

		for (File file : directory.listFiles()) {
			if (file.isFile()) {
				final String name = file.getName();

				if (name.endsWith(".log")) {
					if (checkIfContains(ExploitChecker.exploitString, file))
						containing.add(file);
				} else if (name.endsWith(".log.gz")) {
					if (checkGZIP(file))
						containing.add(file);
				} else {
					System.out.println("Found unsupported file \"" + name + "\" in logs folder, skipping it!");
				}
			}
		}

		return containing;
	}

	public static boolean checkGZIP(File file) {
		boolean found = false;
		try {
			InputStream in = new GZIPInputStream(new FileInputStream(file));

			File tempTxt = new File(tempFolder, file.getName() + ".temp");

			OutputStream out = new FileOutputStream(tempTxt);

			byte[] buffer = new byte[65536];
			int noRead;
			while ((noRead = in.read(buffer)) != -1) {
				out.write(buffer, 0, noRead);
			}
			out.close();
			in.close();

			found = checkIfContains(ExploitChecker.exploitString, tempTxt);

			if (found) {
				System.out.println(
						"The above .temp exploit logs were from a compressed log: \"" + file.getAbsolutePath() + "\".");
			}

			tempTxt.delete();

		} catch (Exception e) {
			System.out.println("Couldn't check GZipped log \"" + file.getName() + "\" (" + e.getMessage() + ")");
		}

		return found;
	}

	public static boolean checkIfContains(String string, File log) {
		boolean found = false;

		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(log)));

			String line;
			int lineCount = 0;
			while ((line = reader.readLine()) != null) {
				lineCount++;
				if (line.toLowerCase().contains(string)) {
					found = true;
					System.out
							.println("Found \"" + string + "\" on line " + lineCount + " of " + log.getAbsolutePath() + "!");
				}
			}

			reader.close();
		} catch (Exception e) {
			System.out.println("Couldn't read file \"" + log.getName() + "\" (" + e.getMessage() + ")");
		}

		return found;
	}

}