package club.koupah.logchecker;

import java.io.File;
import java.util.List;
import java.util.Scanner;

import club.koupah.logchecker.utils.Utils;

public class ExploitChecker {

	public static final String exploitString = "${jndi:";

	public static ExploitChecker INSTANCE;
	public static String typicalFolderName = ".minecraft";

	public Scanner input = new Scanner(System.in);

	public static void main(String[] args) {
		System.out.println("Initializing MC Exploit Checker with " + args.length + " provided argument(s).");
		new ExploitChecker(args);
	}

	String minecraftDirectory;
	File minecraftFolder;

	public ExploitChecker(String[] args) {
		INSTANCE = this;

		String[] selections = Utils.isWindows()
				? new String[] { "Check .minecraft logs", "Check Badlion Client logs", "Check Lunar Client logs", "Exit" }
				: new String[] { "Check .minecraft logs", "Exit" };

		while (true) {
			spacer();

			System.out.println("What would you like to do?");
			for (int i = 0; i < selections.length; i++) {
				System.out.println((i + 1) + ". " + selections[i]);
			}

			int choice = Utils.getNumberInput(1, selections.length) - 1;
			spacer();
			switch (choice) {
			case 0:
				requireMinecraftFolder(args);
				minecraftCheck();
				break;
			case 1:
				if (!Utils.isWindows())
					exit();

				requireMinecraftFolder(args);
				badlionCheck();
				break;
			case 2:
				lunarCheck();
				break;
			case 3:
				exit();
			}

		}

	}

	public void lunarCheck() {
		File lunarLogs = new File("C:\\Users\\" + System.getProperty("user.name") + "\\.lunarclient\\offline");

		if (lunarLogs.exists() && lunarLogs.isDirectory()) {
			System.out.println("Lunar Logs directory: \"" + lunarLogs.getAbsolutePath() + "\"");

			System.out.println("Press Enter to start scanning!");
			Utils.waitForEnter();

			spacer();
			System.out.println("Log scanning has begun...");
			System.out.println(" - Note: This can take anywhere from 10 seconds to 2 minutes");
			spacer();

			int logsChecked = 0;
			int foldersChecked = 0;
			int exploits = 0;

			contents: for (File file : lunarLogs.listFiles()) {

				if (!file.isDirectory() || !file.getName().contains(".")) // Versions all contain a '.'
					continue;

				if (Utils.containsFolder(file, "logs")) {

					System.out.println("Checking logs for Lunar Client v" + file.getName() + "...");
					File verLogs = new File(file, "logs");

					List<File> containing = Utils.checkAllFiles(verLogs);

					if (containing.isEmpty()) {
						System.out.println("Lunar Client v" + file.getName() + " logs are clean.");
					} else {
						System.out.println("Use of the Log4J exploit was found in " + containing.size()
								+ " log files for Lunar Client v" + file.getName() + "!");
						System.out.println("Would you like to view a list of all the files containing the exploit?");

						if (Utils.getBooleanInput()) {
							System.out.println("------------");
							for (File exploitInside : containing)
								System.out.println("- " + exploitInside.getAbsolutePath());
							System.out.println("------------");
							System.out.println(" ");
						}

						exploits += containing.size();

						System.out.println("Do you want to continue searching Lunar Client logs?");
						if (!Utils.getBooleanInput()) {
							break contents;
						}
					}

					foldersChecked++;
					logsChecked += verLogs.listFiles().length;

				} else {
					System.out.println("Skipping Lunar Client v" + file.getName() + " as it has no logs folder.");
				}

			}

			System.out.println("Lunar Client log scanning has completed.");
			System.out.println("Results: ");
			System.out.println(" - Checked: " + logsChecked + " log files in " + foldersChecked + " folders");
			System.out.println(" - Exploit: found a total of " + exploits + " log files containing the exploit");

			System.out.println(" ");
			System.out.println("What does this mean?");

			if (exploits == 0) {
				System.out.println(
						"This means that it doesn't appear that you have been impacted by or exposed to this exploit whilst on Lunar Client.");
			} else {
				System.out.println("You should investigate the log files containing the exploit for some context!");
				System.out.println("If you're unsure, or need help, contact someone who you believe is knowledgeable.");
			}

			System.out.println("Feel free to contact me on Discord (Koupah#5129), Github (Koupah) or Twitter (@Koupahs).");
		} else {
			System.out.println("Lunar Client logs folder does not appear to exist! (" + lunarLogs.getAbsolutePath() + ")");
			System.out.println("Please make sure you've actually played Lunar Client!");
		}

		returnHome();
	}

	public void exit() {
		spacer();
		System.out.println("Exiting.");
		System.exit(0);
	}

	public void spacer() {
		for (int i = 0; i < 2; i++)
			System.out.println(" ");
	}

	public void requireMinecraftFolder(String[] args) {
		if (minecraftDirectory == null) {
			if (args.length > 0) {
				minecraftDirectory = args[0];
			} else {
				if (Utils.isWindows()) {
					System.out.println("Using default Windows '.minecraft' folder directory as one hasn't been specified.");
					minecraftDirectory = System.getenv("APPDATA") + File.separator + typicalFolderName;
				} else {
					System.out.println("It seems you're using a non Windows OS, which is fine.");
					System.out.println("You'll need to select a default directory for your '.minecraft' folder.");
					System.out.println(" Note: A custom directory can be specified in the next step");
					System.out.println(" ");

					System.out.println("Please input a selection (number).");

					String[] choices = new String[] { "~/Library/Application Support/minecraft (macOS Default)",
							"~/.minecraft (Linux Default)" };

					for (int i = 0; i < choices.length; i++) {
						System.out.println((i + 1) + ". " + choices[i]);
					}

					int selection = Utils.getNumberInput(1, 2);

					minecraftDirectory = choices[selection - 1].split(" \\(")[0];
					System.out.println("Now using \"" + minecraftDirectory + "\" as '.minecraft' folder location.");
				}

				minecraftFolder = new File(minecraftDirectory);

				if (!minecraftFolder.exists()) {
					System.out.println("Note: The above '.minecraft' directory does not appear to exist!");
				}

				System.out.println(
						"Would you like to input a custom '.minecraft' directory? (Currently: " + minecraftDirectory + ")");
				boolean changeDir = Utils.getBooleanInput();

				if (changeDir) {
					System.out.println("Please provide the directory for your '.minecraft' folder!");
					minecraftFolder = Utils.getDirectoryInput();
					minecraftDirectory = minecraftFolder.getAbsolutePath();
					System.out.println("Set Minecraft Directory to \"" + minecraftDirectory + "\"!");
				}
			}
		}
	}

	public void badlionCheck() {
		System.out.println("Your '.minecraft' directory is set to \"" + minecraftDirectory + "\"");

		File badlionLogs = new File(minecraftFolder, "logs/blclient/minecraft");

		System.out.println("Badlion Client logs folder: \"" + badlionLogs.getAbsolutePath() + "\"");

		if (badlionLogs.exists()) {

			System.out.println("Press Enter to start scanning!");
			Utils.waitForEnter();

			scanLogs(badlionLogs);
		} else {
			System.out.println("You do not seem to have a Badlion Client logs folder!");
			System.out.println(
					"Have you actually played on Badlion Client? Please double check you did everything correctly!");
		}

		returnHome();
	}

	public void minecraftCheck() {
		System.out.println("Your '.minecraft' directory is set to \"" + minecraftDirectory + "\"");

		if (Utils.containsFolder(minecraftFolder, "logs")) {

			System.out.println("Press Enter to start scanning!");
			Utils.waitForEnter();

			scanLogs(new File(minecraftFolder, "logs"));
		} else {
			System.out.println("Your Minecraft Folder doesn't contain a folder called \"logs\" in it!");
			System.out
					.println("If this is a mistake, please re-run this utility and specify a custom Minecraft Directory!");
		}

		returnHome();
	}

	public void scanLogs(File logs) {
		spacer();
		System.out.println("Log scanning has begun...");
		System.out.println(" - Note: This can take anywhere from 10 seconds to 2 minutes");
		spacer();

		List<File> containing = Utils.checkAllFiles(logs);

		spacer();

		System.out.println("Log scanning has completed.");
		System.out.println("Results: ");
		System.out.println(" - Checked: " + logs.listFiles().length + " log files");
		System.out.println(" - Exploit: found in " + containing.size() + " log files");

		System.out.println(" ");
		System.out.println("What does this mean?");

		if (containing.isEmpty()) {
			System.out
					.println("This means that it doesn't appear that you have been impacted by or exposed to this exploit.");
		} else {
			System.out.println("You should investigate the log files containing the exploit for some context!");
			System.out.println("If you're unsure, or need help, contact someone who you believe is knowledgeable.");

			System.out.println(" ");
			System.out.println("Would you like to view a list of all the files containing the exploit?");

			if (Utils.getBooleanInput()) {
				System.out.println("------------");
				for (File file : containing)
					System.out.println("- " + file.getAbsolutePath());
				System.out.println("------------");
				System.out.println(" ");
			}

		}

		System.out.println("Feel free to contact me on Discord (Koupah#5129), Github (Koupah) or Twitter (@Koupahs).");
	}

	public void returnHome() {
		System.out.println(" ");
		System.out.println("Press Enter to return home.");
		Utils.waitForEnter();
	}

	public static Scanner getInput() {
		return INSTANCE.input;
	}

	public static ExploitChecker getInstance() {
		return INSTANCE;
	}

	public static String getMinecraftDirectory() {
		return getInstance().minecraftDirectory;
	}

}
