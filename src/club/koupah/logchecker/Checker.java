package club.koupah.logchecker;

import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import club.koupah.logchecker.utils.Utils;

public abstract class Checker {

	public static Scanner input = new Scanner(System.in);

	public static ExploitChecker INSTANCE;
	public static String typicalFolderName = ".minecraft";

	public static String minecraftDirectory;
	public static File minecraftFolder;

	public String name;

	public Checker(String name) {
		this.name = name;
	}

	public abstract void check();

	public void exit() {
		spacer();
		System.out.println("Exiting.");
		System.exit(0);
	}

	public void spacer() {
		for (int i = 0; i < 2; i++)
			System.out.println(" ");
	}

	public void requireMinecraftFolder(String[] args) {
		if (minecraftDirectory == null) {
			if (args.length > 0) {
				minecraftDirectory = args[0];
			} else {
				if (Utils.isWindows()) {
					System.out.println("Using default Windows '.minecraft' folder directory as one hasn't been specified.");
					minecraftDirectory = System.getenv("APPDATA") + File.separator + typicalFolderName;
				} else {
					System.out.println("It seems you're using a non Windows OS, which is fine.");
					System.out.println("You'll need to select a default directory for your '.minecraft' folder.");
					System.out.println(" Note: A custom directory can be specified in the next step");
					System.out.println(" ");

					System.out.println("Please input a selection (number).");

					String[] choices = new String[] { "~/Library/Application Support/minecraft (macOS Default)",
							"~/.minecraft (Linux Default)" };

					for (int i = 0; i < choices.length; i++) {
						System.out.println((i + 1) + ". " + choices[i]);
					}

					int selection = Utils.getNumberInput(1, 2);

					minecraftDirectory = choices[selection - 1].split(" \\(")[0];
					System.out.println("Now using \"" + minecraftDirectory + "\" as '.minecraft' folder location.");
				}

				minecraftFolder = new File(minecraftDirectory);

				if (!minecraftFolder.exists()) {
					System.out.println("Note: The above '.minecraft' directory does not appear to exist!");
				}

				System.out.println(
						"Would you like to input a custom '.minecraft' directory? (Currently: " + minecraftDirectory + ")");
				boolean changeDir = Utils.getBooleanInput();

				if (changeDir) {
					System.out.println("Please provide the directory for your '.minecraft' folder!");
					minecraftFolder = Utils.getDirectoryInput();
					minecraftDirectory = minecraftFolder.getAbsolutePath();
					System.out.println("Set Minecraft Directory to \"" + minecraftDirectory + "\"!");
				}
			}
		}
	}

	public void scanLogs(File logs, String platform) {
		spacer();
		System.out.println("Log scanning has begun...");
		System.out.println(" - Note: This can take anywhere from 10 seconds to 2 minutes");
		spacer();

		List<File> containing = Utils.checkAllFiles(logs);

		spacer();

		System.out.println("Log scanning has completed.");
		System.out.println("Results: ");
		System.out.println(" - Checked: " + logs.listFiles().length + " log files");
		System.out
				.println(" - Potential Exploit: " + containing.size() + " log files that potentially contain the exploit");

		printExplanation(containing.size(), platform);

		if (!containing.isEmpty()) {
			System.out.println(" ");
			System.out.println("Would you like to view a list of all the files that potentially contain the exploit?");

			if (Utils.getBooleanInput()) {
				System.out.println("------------");
				for (File file : containing)
					System.out.println("- " + file.getAbsolutePath());
				System.out.println("------------");
				System.out.println(" ");
			}
		}

	}

	public void returnHome() {
		System.out.println(" ");
		System.out.println("Press Enter to return home.");
		Utils.waitForEnter();
	}

	public void printExplanation(int exploitCount, String platform) {
		System.out.println(" ");
		System.out.println("What does this mean?");

		if (exploitCount == 0) {
			System.out.println(
					"This means that it doesn't immediately appear that you have been impacted by or exposed to this exploit whilst "
							+ platform + ". There is still a chance that you were, however there are no log files indicating such.");
		} else {
			System.out
					.println("You should investigate the log files that potentially contain the exploit for some context!");
			System.out.println(
					"If the logs are from after the Mojang patch, or any other 'official' patch, you should be fine.");
			System.out.println(
					" Please Note: Server owners may have originally implemented a bad 'patch' that was bypassed. Do not rely on this when checking dates.");

			System.out.println(
					"If you're unsure of anything, or need help, contact someone who you believe is knowledgeable.");
		}

		System.out.println("Feel free to contact me on Discord (Koupah#5129), Github (Koupah) or Twitter (@Koupahs).");
	}

	public static String getMinecraftDirectory() {
		return minecraftDirectory;
	}

	public String getName() {
		return this.name;
	}

	public static final Pattern log4jFormat;

	// Literal strings to skip. "String" ignores "${String}", case sensitive
	public static final List<String> ignoreExact = Arrays.asList("project.version", "git.commit.id.abbrev");

	static {
		String pattern = "((?<=\\$\\{" + "%ignore%" + ")(?! )(.[^ \\s]*\\[?)(?=(?<! )\\}))";

		StringBuilder builder = new StringBuilder("");
		for (String ignore : ignoreExact) {
			builder.append("(?!");
			builder.append(ignore.replace(".", "\\."));
			builder.append("})");
		}

		log4jFormat = Pattern.compile(pattern.replace("%ignore%", builder.toString()));
	}

	public static boolean hasLog4jFormat(String input) {
		return input == null ? false : getLog4jMatcher(input).find();
	}

	public static Matcher getLog4jMatcher(String input) {
		return log4jFormat.matcher(input);
	}

}
