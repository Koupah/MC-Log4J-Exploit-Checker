package club.koupah.logchecker.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import club.koupah.logchecker.Checker;
import club.koupah.logchecker.utils.Utils;

public class MultiMCChecker extends Checker {

	public MultiMCChecker() {
		super("Check MultiMC logs");
	}

	@Override
	public void check() {
		System.out.println("Please provide the directory of your MultiMC launcher.");
		System.out.println(" Note: The MultiMC folder should contain a folder named \"instances\"");

		File folder = Utils.getDirectoryInput();

		if (folder.exists()) {
			if (Utils.containsFolder(folder, "instances")) {
				File instances = new File(folder, "instances");

				List<File> versionFolders = new ArrayList<File>();

				for (File ver : instances.listFiles()) {
					if (ver.isDirectory() && !ver.getName().startsWith("_"))
						versionFolders.add(ver);
				}

				System.out.println("Detected " + versionFolders.size() + " MultiMC instance(s)!");

				System.out.println("Press Enter to start scanning!");
				Utils.waitForEnter();

				spacer();
				System.out.println("Log scanning has begun...");
				System.out.println(" - Note: This can take anywhere from 10 seconds to 2 minutes");
				spacer();

				if (!versionFolders.isEmpty()) {
					int logsChecked = 0;
					int versionsChecked = 0;
					int exploits = 0;

					contents: for (File version : versionFolders) {
						versionsChecked++;
						File mcFolder = getFirstFolder(version, "minecraft"); // '.minecraft' or 'minecraft' (I think linux or
																								// mac doesnt use the '.')

						if (mcFolder == null) {
							System.out
									.println("Skipping " + version.getName() + " (Couldn't find .minecraft/minecraft folder)");
						} else {
							if (Utils.containsFolder(mcFolder, "logs")) {
								File logs = new File(mcFolder, "logs");
								List<File> containing = Utils.checkAllFiles(logs);

								if (containing.isEmpty()) {
									System.out.println("MultiMC instance " + version.getName() + "'s logs are clean.");
								} else {
									System.out.println("Use of the Log4J exploit was found in " + containing.size()
											+ " log files for MultiMC instance " + version.getName() + "!");
									System.out.println("Would you like to view a list of all the files containing the exploit?");

									if (Utils.getBooleanInput()) {
										System.out.println("------------");
										for (File exploitInside : containing)
											System.out.println("- " + exploitInside.getAbsolutePath());
										System.out.println("------------");
										System.out.println(" ");
									}

									exploits += containing.size();

									System.out.println("Do you want to continue searching MultiMC logs?");
									if (!Utils.getBooleanInput()) {
										break contents;
									}
								}

								logsChecked += logs.listFiles().length;

							} else {
								System.out.println("Skipping " + version.getName() + " as it doesn't have a logs folder");
							}
						}
					}

					System.out.println("MultiMC log scanning has completed.");
					System.out.println("Results: ");
					System.out.println(" - Checked: " + logsChecked + " log files in " + versionsChecked + " instances");
					System.out.println(" - Exploit: found a total of " + exploits + " log files containing the exploit");

					printExplanation(exploits, "using MutliMC");

				}

			} else {
				System.out.println("That folder doesn't contain an \"instances\" folder!");
				System.out.println("Please double check that you've provided the right directory and try again.");
			}
		} else {
			System.out.println("That folder doesn't exist!");
		}

		returnHome();
	}
	

	private File getFirstFolder(File parent, String endingWith) {
		for (File child : parent.listFiles())
			if (child.isDirectory() && child.getName().endsWith(endingWith))
				return child;

		return null;
	}
	
}
