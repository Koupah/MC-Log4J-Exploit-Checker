package club.koupah.logchecker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import club.koupah.logchecker.impl.BadlionChecker;
import club.koupah.logchecker.impl.LunarChecker;
import club.koupah.logchecker.impl.MultiMCChecker;
import club.koupah.logchecker.impl.VanillaChecker;
import club.koupah.logchecker.utils.Utils;

public class ExploitChecker extends Checker {

	/*
	 * TODO: Clean this code up, clean up Checker code too
	 * 
	 * SURELY someone forks and makes a nice PR to clean this up xo
	 */

	List<Checker> checks;

	private static ExploitChecker INSTANCE;

	public String[] arguments;

	public static void main(String[] args) {
		System.out.println("Initializing MC Exploit Checker with " + args.length + " provided argument(s).");

		new ExploitChecker(args).check();
	}

	public ExploitChecker(String[] args) {
		super("ExploitChecker");
		INSTANCE = this;
		this.arguments = args;

		checks = new ArrayList<Checker>(Arrays.asList(new VanillaChecker(), new MultiMCChecker()));

		if (Utils.isWindows()) {
			checks.addAll(Arrays.asList(new BadlionChecker(), new LunarChecker()));
		}

		System.out.println("Created new ExploitChecker. [" + checks.size() + " checkers available on this platform]");

	}

	public void lunarCheck() {

	}

	@Override
	public void check() {
		String[] selections = Utils.isWindows()
				? new String[] { "Check .minecraft logs", "Check Badlion Client logs", "Check Lunar Client logs",
						"Check MultiMC logs", "Exit" }
				: new String[] { "Check .minecraft logs", "Exit" };

		while (true) {
			spacer();

			System.out.println("What would you like to do?");
			for (int i = 0; i < checks.size(); i++) {
				System.out.println((i + 1) + ". " + checks.get(i).getName());
			}

			System.out.println((checks.size() + 1) + ". Exit");

			int choice = Utils.getNumberInput(1, selections.length) - 1;
			spacer();

			if (choice >= checks.size()) {
				exit();
			} else {
				checks.get(choice).check();
			}

		}
	}

	public static ExploitChecker getInstance() {
		return ExploitChecker.INSTANCE;
	}

	public String[] getArguments() {
		return this.arguments;
	}
	
}
